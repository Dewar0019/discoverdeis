{"version":3,"sources":["meteor://ðŸ’»app/server/startup.js"],"names":[],"mappings":"yfile":"/server/startup.js","sourcesContent":["Meteor.startup(function() {\n\tIntersectionsYX._ensureIndex({\"coordinate\":\"2dsphere\"});\n\tCornerPoints._ensureIndex({\"coordinate\":\"2dsphere\"});\n\t// __meteor_runtime_config__.ROOT_URL = \"http://localhost:5000/\";\n\t// console.log(__meteor_runtime_config__.ROOT_URL); \n\t// console.log(__meteor_runtime_config__); \n\n\n\t// process.env.PORT = 5000;\n\t// console.log(process.env.PORT)\n\t// Meteor.absoluteUrl.defaultOptions.rootUrl\n\t// process.env.ROOT_URL\n\t// process.env.MOBILE_ROOT_URL \n\t// process.env.MOBILE_DDP_URL\n\n\t\n\tif (Locations.find().count() == 0) {\n\t\t// list of all of the files containing location data\n\t\tvar locFiles = [\n\t\t\tlocations_admission,\n\t\t\tlocations_arts,\n\t\t\tlocations_athletics,\n\t\t\tlocations_dorms,\n\t\t\tlocations_east,\n\t\t\tlocations_ibs,\n\t\t\tlocations_mandelHellerLibrary,\n\t\t\tlocations_massellChapels,\n\t\t\tlocations_oldSt,\n\t\t\tlocations_parking,\n\t\t\tlocations_presidential,\n\t\t\tlocations_scienceComplex,\n\t\t\tlocations_transport,\n\t\t\tlocations_usdan,\n\t\t\tlocations_artinstallations,\n\t\t\tlocations_rooms\n\t\t];\n\t\t\n\t\tlocFiles.forEach(function(locFile) {\n\t\t\tlocFile.forEach(function(location) {\n\t\t\t\tLocations.insert(location);\n\t\t\t\t\n\t\t\t\tvar c = null;\n\t\t\t\tif (location.coordinates.type == \"Point\") {\n\t\t\t\t\tc = location.coordinates.coordinates;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// use first entrance\n\t\t\t\t\tc = location.coordinates.coordinates[0][0];\n\t\t\t\t}\n\t\t\t\tCornerPoints.insert({\"coordinate\":{\"type\":\"Point\",\"coordinates\":[c[1],c[0]]},\"name\":location.name}); // need to flip x and y for geojson\n\t\t\t\t\n\t\t\t});\n\t\t});\t\t\n\t}\n\t\n\tif (Intersections.find().count() == 0) {\n\t\tvar intersectFiles = [\n\t\t\tpoints_centralCampus,\n\t\t\tpoints_lowerDorms,\n\t\t\tpoints_massellchapels,\n\t\t\tpoints_southcampus,\n\t\t\tpoints_gym,\n\t\t\tpoints_admin, \n\t\t\tpoints_science,\n\t\t\tpoints_northrabb,\n\t\t\tpoints_mandelquad,\n\t\t\tpoints_library,\n\t\t\tpoints_usdan,\n\t\t\tpoints_east,\n\t\t\tpoints_grad,\n\t\t\tpoints_ibs,\n\t\t\tpoints_rooms\n\t\t];\n\n\t\t\n\t\tintersectFiles.forEach(function(intersectFile) {\n\t\t\tintersectFile.forEach(function(point) {\n\t\t\t\tif (point.singlepoint){\n\t\t\t\t\tpoint.type = \"entrance\";\n\t\t\t\t\t// the single point's entrance is always the same as its location coordinate\n\t\t\t\t\tpoint.coordinate = Locations.findOne({\"id\":point.id.replace('_e01','')}).coordinates;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tIntersections.insert(point);\n\t\t\t\n\t\t\t\tvar flipped = {\"type\":\"Point\",\"coordinates\":[point.coordinate.coordinates[1],point.coordinate.coordinates[0]]};\n\t\t\t\n\t\t\t\tIntersectionsYX.insert({\"id\":point.id,\"coordinate\":flipped,\"type\":point.type,\"getTo\":point.getTo});\n\t\t\t\t\n\t\t\t});\n\t\t});\n\t}\n\t\n\tif (Paths.find().count() == 0) {\n\t\tvar pathFiles = [\n\t\t\tpaths_massellchapels,\n\t\t\tpaths_lowerDorms, \n\t\t\tpaths_southcampus,\t\n\t\t\tpaths_gym,\n\t\t\tpaths_admin, \n\t\t\tpaths_science,\n\t\t\tpaths_northrabb,\n\t\t\tpaths_mandelquad,\n\t\t\tpaths_library,\n\t\t\tpaths_east,\n\t\t\tpaths_usdan,\n\t\t\tpaths_grad,\n\t\t\tpaths_ibs,\n\t\t\tpaths_bernstein,\n\t\t\tpaths_rooms\n\t\t];\n\t\t\n\t\tpathFiles.forEach(function(pathFile) {\n\t\t\tpathFile.forEach(function(path) {\n\t\t\t\t//console.log(\"path###############\");\n\t\t\t\t//console.log(Intersections.findOne({\"id\":path.start}));\n\t\t\t\t//console.log(Intersections.findOne({\"id\":path.end}));\n\t\t\t\tMeteor.call(\"distance\",\n\t\t\t\t\t{\"x\":Intersections.findOne({\"id\":path.start}).coordinate.coordinates[0],\"y\":Intersections.findOne({\"id\":path.start}).coordinate.coordinates[1]},\n\t\t\t\t\t{\"x\":Intersections.findOne({\"id\":path.end}).coordinate.coordinates[0],\"y\":Intersections.findOne({\"id\":path.end}).coordinate.coordinates[1]},\n\t\t\t\t\tfunction(error,data) {\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\tconsole.log(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tpath.distance = data;\n\t\t\t\t\t\t\tPaths.insert(path);\n\t\t\t\t\t\t\t// console.log(path);\t\n\t\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\t\n\t\t});\n\t}\n\n\tif (Map.find().count() == 0) {\n\t\tvar map = {};\n\t\tpaths = Paths.find().fetch();\n\t\t/*console.log(paths);*/\n\t\tpaths.forEach(function(path){\n\t\t\tvar start = path.start;\n\t\t\tvar end = path.end;\n\t\t\tvar dist = path.distance;\n\t\t\tif (map[start] == undefined || map[start] == null){\n\t\t\t\tmap[start] = {};\n\t\t\t}\n\t\t\tmap[start][end] = dist;\n\t\t});\n\t\t\n\t\t/*console.log(map);*/\n\t\tMap.insert(map);\n\t}\n\n\tif (Hours.find().count()==0){\n\t\tvar hoursFile=operationhours;\n\t\thoursFile.forEach(function(hour) {\n\t\t\t//console.log(hour);\n\t\t\tHours.insert(hour);\n\t\t\t\n\t\t});\n\t}\n\n\t// if (Classes.find().count()==0){\n\t// \tcourse.forEach(function( course) {\n\t// \t\tClasses.insert(course);\n\t// })\n\n\t// \tinstructor.forEach(function(instructor) {\n\t// \t\tInstructors.insert(instructor)\n\t// \t});\n\n\t// \tsection.forEach(function(section) {\n\t// \t\ttheCourse = Classes.findOne({ id: section.course});\n\t// \t\tif(theCourse != undefined) {\n\t// \t\t\tif( section.times[0] != undefined) {\n\t// \t\t\t\t//console.log(section.times[0]);\n\t// \t\t\t\tClasses.update({ id: section.course},\n\t// \t\t\t\t\t{ $set: {   \"times\": section.times[0],\n\t// \t\t\t\t\t\t\t\t\"instructor\": Instructors.findOne({id: section.instructors[0]}),\n\t// \t\t\t\t\t \t\t} \n\t// \t\t\t\t});\t\t\t\t\t\n\t// \t\t\t}\n\t// \t\t}\n\t// \t})\n\n\t// \t//Remove all the classes without building fields\n\t// \tClasses.remove({\"times.building\": undefined})\n\t// }\n\n\n\t\n\tconsole.log(Map.find().count());\n\tconsole.log(\"startup end\");\n\n});"]}