{"version":3,"sources":["meteor://ðŸ’»app/server/server.js"],"names":[],"mappings":"yfile":"/server/server.js","sourcesContent":["pointIncluded = function(vertices, current) {\n\tincluded = false;\n\tnumVert = vertices.length;\n\t// create arrays of the x and y coordinates of the polygon\n\tvar xArray = [];\n\tvar yArray = [];\n\n\tfor (var i = 0; i < numVert; i++) {\n\t\txArray.push(vertices[i][0]);\n\t\tyArray.push(vertices[i][1]);\n\t}\n\t\n\tfor (var i = 0, j = numVert - 1; i < numVert; j = i++) {\n\t\tif ((yArray[i] >= current.y) != (yArray[j] >= current.y) &&\n\t\t\t(current.x <= (xArray[j] - xArray[i]) * (current.y - yArray[i]) / (yArray[j] - yArray[i]) +xArray[i])) {\n\t\t\tincluded = !included;\n\n\t\t}\n\t}\n\treturn included;\n};\n\ndistance = function(start, end) {\n\tvar theNearestDistance = 1000000000;\n\t//console.log(JSON.stringify(start)+JSON.stringify(end));\n\tvar R = 6371000; // metres\n\n\tvar lat1 = start.x;\n\tvar lat2 = end.x;\n\tvar lon1 = start.y;\n\tvar lon2 = end.y;\n\n\tvar p1 = lat1 * (Math.PI / 180);\n\tvar p2 = lat2 * (Math.PI / 180);\n\tvar dp = (lat2-lat1) * (Math.PI / 180);\n\tvar dl = (lon2-lon1) * (Math.PI / 180);\n\n\tvar a = Math.sin(dp/2) * Math.sin(dp/2) +\n\t        Math.cos(p1) * Math.cos(p2) *\n\t        Math.sin(dl/2) * Math.sin(dl/2);\n\tvar c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\n\tvar d = R * c;\n\n\treturn d;\n}\n\n\nsearchLocations = function(current) {\n\tvar location = null;\n\tvar locatedHere = null;\t\n\tvar allLocations = Locations.find().fetch();\n    console.log(\"SL:\"+ JSON.stringify(current));\n\n\tfor (var i = 0; i < Locations.find().count(); i++) {\n\n\t\t// if the given Point is in the location, return the location\n\t\tif (pointIncluded(allLocations[i].coordinates.coordinates[0], current)) { \n\t\t\treturn [allLocations[i], \"in\"]; \n\t\t}\n\t}\n\t\t\t\n\tif (!locatedHere) {\n\t\tvar theNearest = CornerPoints.findOne({\n\t\t\t\"coordinate\":{\n\t\t\t\t$near: {\n\t\t\t\t\t$geometry: {\n\t\t\t\t\t\t\"type\": \"Point\" ,\n\t\t\t\t\t\t\"coordinates\": [ current.y , current.x ]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t// console.log(theNearest);\n\t\tvar n = distance(current,{\"x\":theNearest.coordinate.coordinates[1],\"y\":theNearest.coordinate.coordinates[0]});\n\t\treturn [Locations.findOne({\"name\":theNearest.name}),\"near\",n];\n\t}\n}\n\n\nMeteor.methods({\n\t/* numVert: number of vertices\n\t * vertices: array of vertices\n\t * current: current location \n\t *\n\t * Determines if a given Point is located within a polygon of n vertices\n\t * Algorithm from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html */\n\tpointIncluded: pointIncluded,\n\n\t/* Search through all locations to see where you are */\n\tsearchLocations: searchLocations, \n\n\n\t/* returns the distance between two points \n\t* adapted from http://www.movable-type.co.uk/scripts/latlong.html */\n\tdistance: distance\n\n\t\n\n});"]}